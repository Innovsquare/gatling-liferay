package com.excilys.liferay.gatling.model.impl;

import com.excilys.liferay.gatling.model.LinkProcessRecord;
import com.excilys.liferay.gatling.model.LinkProcessRecordModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LinkProcessRecord service. Represents a row in the &quot;StressTool_LinkProcessRecord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.excilys.liferay.gatling.model.LinkProcessRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LinkProcessRecordImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LinkProcessRecordImpl
 * @see com.excilys.liferay.gatling.model.LinkProcessRecord
 * @see com.excilys.liferay.gatling.model.LinkProcessRecordModel
 * @generated
 */
public class LinkProcessRecordModelImpl extends BaseModelImpl<LinkProcessRecord>
    implements LinkProcessRecordModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a link process record model instance should use the {@link com.excilys.liferay.gatling.model.LinkProcessRecord} interface instead.
     */
    public static final String TABLE_NAME = "StressTool_LinkProcessRecord";
    public static final Object[][] TABLE_COLUMNS = {
            { "link_process_record_id", Types.BIGINT },
            { "process_id", Types.BIGINT },
            { "recordId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table StressTool_LinkProcessRecord (link_process_record_id LONG not null primary key,process_id LONG,recordId LONG)";
    public static final String TABLE_SQL_DROP = "drop table StressTool_LinkProcessRecord";
    public static final String ORDER_BY_JPQL = " ORDER BY linkProcessRecord.link_process_record_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY StressTool_LinkProcessRecord.link_process_record_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.excilys.liferay.gatling.model.LinkProcessRecord"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.excilys.liferay.gatling.model.LinkProcessRecord"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.excilys.liferay.gatling.model.LinkProcessRecord"),
            true);
    public static long PROCESS_ID_COLUMN_BITMASK = 1L;
    public static long RECORDID_COLUMN_BITMASK = 2L;
    public static long LINK_PROCESS_RECORD_ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.excilys.liferay.gatling.model.LinkProcessRecord"));
    private static ClassLoader _classLoader = LinkProcessRecord.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LinkProcessRecord.class
        };
    private long _link_process_record_id;
    private long _process_id;
    private long _originalProcess_id;
    private boolean _setOriginalProcess_id;
    private long _recordId;
    private long _originalRecordId;
    private boolean _setOriginalRecordId;
    private long _columnBitmask;
    private LinkProcessRecord _escapedModel;

    public LinkProcessRecordModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _link_process_record_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setLink_process_record_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _link_process_record_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LinkProcessRecord.class;
    }

    @Override
    public String getModelClassName() {
        return LinkProcessRecord.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("link_process_record_id", getLink_process_record_id());
        attributes.put("process_id", getProcess_id());
        attributes.put("recordId", getRecordId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long link_process_record_id = (Long) attributes.get(
                "link_process_record_id");

        if (link_process_record_id != null) {
            setLink_process_record_id(link_process_record_id);
        }

        Long process_id = (Long) attributes.get("process_id");

        if (process_id != null) {
            setProcess_id(process_id);
        }

        Long recordId = (Long) attributes.get("recordId");

        if (recordId != null) {
            setRecordId(recordId);
        }
    }

    @Override
    public long getLink_process_record_id() {
        return _link_process_record_id;
    }

    @Override
    public void setLink_process_record_id(long link_process_record_id) {
        _link_process_record_id = link_process_record_id;
    }

    @Override
    public long getProcess_id() {
        return _process_id;
    }

    @Override
    public void setProcess_id(long process_id) {
        _columnBitmask |= PROCESS_ID_COLUMN_BITMASK;

        if (!_setOriginalProcess_id) {
            _setOriginalProcess_id = true;

            _originalProcess_id = _process_id;
        }

        _process_id = process_id;
    }

    public long getOriginalProcess_id() {
        return _originalProcess_id;
    }

    @Override
    public long getRecordId() {
        return _recordId;
    }

    @Override
    public void setRecordId(long recordId) {
        _columnBitmask |= RECORDID_COLUMN_BITMASK;

        if (!_setOriginalRecordId) {
            _setOriginalRecordId = true;

            _originalRecordId = _recordId;
        }

        _recordId = recordId;
    }

    public long getOriginalRecordId() {
        return _originalRecordId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LinkProcessRecord.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LinkProcessRecord toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LinkProcessRecord) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LinkProcessRecordImpl linkProcessRecordImpl = new LinkProcessRecordImpl();

        linkProcessRecordImpl.setLink_process_record_id(getLink_process_record_id());
        linkProcessRecordImpl.setProcess_id(getProcess_id());
        linkProcessRecordImpl.setRecordId(getRecordId());

        linkProcessRecordImpl.resetOriginalValues();

        return linkProcessRecordImpl;
    }

    @Override
    public int compareTo(LinkProcessRecord linkProcessRecord) {
        long primaryKey = linkProcessRecord.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LinkProcessRecord)) {
            return false;
        }

        LinkProcessRecord linkProcessRecord = (LinkProcessRecord) obj;

        long primaryKey = linkProcessRecord.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LinkProcessRecordModelImpl linkProcessRecordModelImpl = this;

        linkProcessRecordModelImpl._originalProcess_id = linkProcessRecordModelImpl._process_id;

        linkProcessRecordModelImpl._setOriginalProcess_id = false;

        linkProcessRecordModelImpl._originalRecordId = linkProcessRecordModelImpl._recordId;

        linkProcessRecordModelImpl._setOriginalRecordId = false;

        linkProcessRecordModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LinkProcessRecord> toCacheModel() {
        LinkProcessRecordCacheModel linkProcessRecordCacheModel = new LinkProcessRecordCacheModel();

        linkProcessRecordCacheModel.link_process_record_id = getLink_process_record_id();

        linkProcessRecordCacheModel.process_id = getProcess_id();

        linkProcessRecordCacheModel.recordId = getRecordId();

        return linkProcessRecordCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{link_process_record_id=");
        sb.append(getLink_process_record_id());
        sb.append(", process_id=");
        sb.append(getProcess_id());
        sb.append(", recordId=");
        sb.append(getRecordId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.excilys.liferay.gatling.model.LinkProcessRecord");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>link_process_record_id</column-name><column-value><![CDATA[");
        sb.append(getLink_process_record_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>process_id</column-name><column-value><![CDATA[");
        sb.append(getProcess_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordId</column-name><column-value><![CDATA[");
        sb.append(getRecordId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
