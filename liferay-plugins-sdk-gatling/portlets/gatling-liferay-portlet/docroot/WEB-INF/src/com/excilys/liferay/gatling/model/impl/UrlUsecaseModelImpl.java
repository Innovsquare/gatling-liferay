/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.excilys.liferay.gatling.model.impl;

import com.excilys.liferay.gatling.model.UrlUsecase;
import com.excilys.liferay.gatling.model.UrlUsecaseModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UrlUsecase service. Represents a row in the &quot;StressTool_UrlUsecase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.excilys.liferay.gatling.model.UrlUsecaseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UrlUsecaseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UrlUsecaseImpl
 * @see com.excilys.liferay.gatling.model.UrlUsecase
 * @see com.excilys.liferay.gatling.model.UrlUsecaseModel
 * @generated
 */
public class UrlUsecaseModelImpl extends BaseModelImpl<UrlUsecase>
	implements UrlUsecaseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a url usecase model instance should use the {@link com.excilys.liferay.gatling.model.UrlUsecase} interface instead.
	 */
	public static final String TABLE_NAME = "StressTool_UrlUsecase";
	public static final Object[][] TABLE_COLUMNS = {
			{ "urlUsecaseId", Types.BIGINT },
			{ "usecaseId", Types.BIGINT },
			{ "url", Types.VARCHAR },
			{ "order_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table StressTool_UrlUsecase (urlUsecaseId LONG not null primary key,usecaseId LONG,url VARCHAR(75) null,order_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table StressTool_UrlUsecase";
	public static final String ORDER_BY_JPQL = " ORDER BY urlUsecase.urlUsecaseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY StressTool_UrlUsecase.urlUsecaseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.excilys.liferay.gatling.model.UrlUsecase"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.excilys.liferay.gatling.model.UrlUsecase"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.excilys.liferay.gatling.model.UrlUsecase"));

	public UrlUsecaseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _urlUsecaseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUrlUsecaseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _urlUsecaseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UrlUsecase.class;
	}

	@Override
	public String getModelClassName() {
		return UrlUsecase.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("urlUsecaseId", getUrlUsecaseId());
		attributes.put("usecaseId", getUsecaseId());
		attributes.put("url", getUrl());
		attributes.put("order", getOrder());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long urlUsecaseId = (Long)attributes.get("urlUsecaseId");

		if (urlUsecaseId != null) {
			setUrlUsecaseId(urlUsecaseId);
		}

		Long usecaseId = (Long)attributes.get("usecaseId");

		if (usecaseId != null) {
			setUsecaseId(usecaseId);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Integer order = (Integer)attributes.get("order");

		if (order != null) {
			setOrder(order);
		}
	}

	@Override
	public long getUrlUsecaseId() {
		return _urlUsecaseId;
	}

	@Override
	public void setUrlUsecaseId(long urlUsecaseId) {
		_urlUsecaseId = urlUsecaseId;
	}

	@Override
	public long getUsecaseId() {
		return _usecaseId;
	}

	@Override
	public void setUsecaseId(long usecaseId) {
		_usecaseId = usecaseId;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		_order = order;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UrlUsecase.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UrlUsecase toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UrlUsecase)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UrlUsecaseImpl urlUsecaseImpl = new UrlUsecaseImpl();

		urlUsecaseImpl.setUrlUsecaseId(getUrlUsecaseId());
		urlUsecaseImpl.setUsecaseId(getUsecaseId());
		urlUsecaseImpl.setUrl(getUrl());
		urlUsecaseImpl.setOrder(getOrder());

		urlUsecaseImpl.resetOriginalValues();

		return urlUsecaseImpl;
	}

	@Override
	public int compareTo(UrlUsecase urlUsecase) {
		long primaryKey = urlUsecase.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UrlUsecase)) {
			return false;
		}

		UrlUsecase urlUsecase = (UrlUsecase)obj;

		long primaryKey = urlUsecase.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UrlUsecase> toCacheModel() {
		UrlUsecaseCacheModel urlUsecaseCacheModel = new UrlUsecaseCacheModel();

		urlUsecaseCacheModel.urlUsecaseId = getUrlUsecaseId();

		urlUsecaseCacheModel.usecaseId = getUsecaseId();

		urlUsecaseCacheModel.url = getUrl();

		String url = urlUsecaseCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			urlUsecaseCacheModel.url = null;
		}

		urlUsecaseCacheModel.order = getOrder();

		return urlUsecaseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{urlUsecaseId=");
		sb.append(getUrlUsecaseId());
		sb.append(", usecaseId=");
		sb.append(getUsecaseId());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", order=");
		sb.append(getOrder());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.excilys.liferay.gatling.model.UrlUsecase");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>urlUsecaseId</column-name><column-value><![CDATA[");
		sb.append(getUrlUsecaseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usecaseId</column-name><column-value><![CDATA[");
		sb.append(getUsecaseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>order</column-name><column-value><![CDATA[");
		sb.append(getOrder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UrlUsecase.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UrlUsecase.class
		};
	private long _urlUsecaseId;
	private long _usecaseId;
	private String _url;
	private int _order;
	private UrlUsecase _escapedModel;
}