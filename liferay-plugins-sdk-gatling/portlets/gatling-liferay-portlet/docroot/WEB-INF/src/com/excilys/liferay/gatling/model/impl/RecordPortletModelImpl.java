/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.excilys.liferay.gatling.model.impl;

import com.excilys.liferay.gatling.model.RecordPortlet;
import com.excilys.liferay.gatling.model.RecordPortletModel;
import com.excilys.liferay.gatling.model.RecordPortletSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RecordPortlet service. Represents a row in the &quot;StressTool_RecordPortlet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.excilys.liferay.gatling.model.RecordPortletModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecordPortletImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RecordPortletImpl
 * @see com.excilys.liferay.gatling.model.RecordPortlet
 * @see com.excilys.liferay.gatling.model.RecordPortletModel
 * @generated
 */
@JSON(strict = true)
public class RecordPortletModelImpl extends BaseModelImpl<RecordPortlet>
	implements RecordPortletModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a record portlet model instance should use the {@link com.excilys.liferay.gatling.model.RecordPortlet} interface instead.
	 */
	public static final String TABLE_NAME = "StressTool_RecordPortlet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recordPortletId", Types.BIGINT },
			{ "portletId", Types.VARCHAR },
			{ "state_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table StressTool_RecordPortlet (recordPortletId LONG not null primary key,portletId VARCHAR(75) null,state_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table StressTool_RecordPortlet";
	public static final String ORDER_BY_JPQL = " ORDER BY recordPortlet.recordPortletId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY StressTool_RecordPortlet.recordPortletId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.excilys.liferay.gatling.model.RecordPortlet"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.excilys.liferay.gatling.model.RecordPortlet"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RecordPortlet toModel(RecordPortletSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RecordPortlet model = new RecordPortletImpl();

		model.setRecordPortletId(soapModel.getRecordPortletId());
		model.setPortletId(soapModel.getPortletId());
		model.setState(soapModel.getState());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RecordPortlet> toModels(RecordPortletSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RecordPortlet> models = new ArrayList<RecordPortlet>(soapModels.length);

		for (RecordPortletSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.excilys.liferay.gatling.model.RecordPortlet"));

	public RecordPortletModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recordPortletId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecordPortletId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recordPortletId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RecordPortlet.class;
	}

	@Override
	public String getModelClassName() {
		return RecordPortlet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recordPortletId", getRecordPortletId());
		attributes.put("portletId", getPortletId());
		attributes.put("state", getState());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recordPortletId = (Long)attributes.get("recordPortletId");

		if (recordPortletId != null) {
			setRecordPortletId(recordPortletId);
		}

		String portletId = (String)attributes.get("portletId");

		if (portletId != null) {
			setPortletId(portletId);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}
	}

	@JSON
	@Override
	public long getRecordPortletId() {
		return _recordPortletId;
	}

	@Override
	public void setRecordPortletId(long recordPortletId) {
		_recordPortletId = recordPortletId;
	}

	@JSON
	@Override
	public String getPortletId() {
		if (_portletId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletId;
		}
	}

	@Override
	public void setPortletId(String portletId) {
		_portletId = portletId;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RecordPortlet.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RecordPortlet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RecordPortlet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RecordPortletImpl recordPortletImpl = new RecordPortletImpl();

		recordPortletImpl.setRecordPortletId(getRecordPortletId());
		recordPortletImpl.setPortletId(getPortletId());
		recordPortletImpl.setState(getState());

		recordPortletImpl.resetOriginalValues();

		return recordPortletImpl;
	}

	@Override
	public int compareTo(RecordPortlet recordPortlet) {
		long primaryKey = recordPortlet.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RecordPortlet)) {
			return false;
		}

		RecordPortlet recordPortlet = (RecordPortlet)obj;

		long primaryKey = recordPortlet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RecordPortlet> toCacheModel() {
		RecordPortletCacheModel recordPortletCacheModel = new RecordPortletCacheModel();

		recordPortletCacheModel.recordPortletId = getRecordPortletId();

		recordPortletCacheModel.portletId = getPortletId();

		String portletId = recordPortletCacheModel.portletId;

		if ((portletId != null) && (portletId.length() == 0)) {
			recordPortletCacheModel.portletId = null;
		}

		recordPortletCacheModel.state = getState();

		String state = recordPortletCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			recordPortletCacheModel.state = null;
		}

		return recordPortletCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{recordPortletId=");
		sb.append(getRecordPortletId());
		sb.append(", portletId=");
		sb.append(getPortletId());
		sb.append(", state=");
		sb.append(getState());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.excilys.liferay.gatling.model.RecordPortlet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recordPortletId</column-name><column-value><![CDATA[");
		sb.append(getRecordPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletId</column-name><column-value><![CDATA[");
		sb.append(getPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RecordPortlet.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RecordPortlet.class
		};
	private long _recordPortletId;
	private String _portletId;
	private String _state;
	private RecordPortlet _escapedModel;
}