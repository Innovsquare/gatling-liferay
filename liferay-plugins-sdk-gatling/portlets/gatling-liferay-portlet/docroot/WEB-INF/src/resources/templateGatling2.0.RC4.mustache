import io.gatling.core.Predef._
import io.gatling.http.Predef._
import scala.concurrent.duration._

/**
 * Gatling 2.0RC5 Script generated for Liferay by the plugin
 * "Load Test with Gatling"
 */
 
 {{#initiate}} {{/initiate}}

class {{simuName}} extends Simulation {

  val httpProtocol = http
	.acceptHeader("""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8""")
	.acceptEncodingHeader("""gzip, deflate""")
	.acceptLanguageHeader("""fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3""")
	.connection("""keep-alive""")
	.disableWarmUp
	
  /**
   * User feeder, list of user for this simulation
   */
{{#feederFile}} 
  val feeder = csv("{{feederContent}}").random
{{/feederFile}}
{{^-feederFile}}
  var feeder = Array(
		  {{#feedMap}}Map("login" -> "{{login}}", "password" -> "{{password}}"){{^-last}},{{/-last}}
		  {{/feedMap}}).random
		  
{{/-feederFile}}

{{#mustacheScenario}}
/**
 * List of the differents requests for {{scenarioName}} that are stressing their inner portlets
 */   
{{#mustacheRequests}}{{^regular}}
  object {{scenarioName}}{{requestName}} {
{{#mustachePortlet}}{{#recorderGet}}
    val {{name}} = 
{{#listGet}}
      {{^-first}}.{{/-first}}exec( http("{{nameN}}").{{typeRequest}}("""{{{url}}}""")
{{#form}}
      	.check(regex("""<input name="{{namespace}}formDate" type="hidden" value="(.+?)" />""").saveAs("formDatePortlet"))
{{/form}}
{{#version}}
			  .check(regex("""id="{{namespace}}version".+?value="(.+?)&#x2e;.+?"""").saveAs("versionEdit1"))
			  .check(regex("""id="{{namespace}}version".+?value=".+?&#x2e;(.+?)"""").saveAs("versionEdit2"))
{{/version}}

			)
{{^-last}}      .pause(2){{/-last}}
{{/listGet}}{{/recorderGet}}
    /* script for {{name}} */
    val {{name}} = 
    	exec(http("Auth_{{name}}").get("{{{url}}}")
			.check(regex("""id="p_p_id_56_INSTANCE_rKrNKVmzAxje.+?class="portlet-body".+?p_auth=(.+?)&""").saveAs("portletAuth"))) 
		re.randomSwitch(
{{#scripts}}
      {{pourcentage}} -> exec({{nameVariable}}){{^-last}},{{/-last}}
{{/scripts}}
    )

{{/mustachePortlet}}
    val Entrance = exec( http("{{requestName}}").get("{{{url}}}") ) 
      .pause(1)
      .randomSwitch(  /*list of the portlets with their weight*/
{{#mustachePortlet}}
         {{pourcentage}} -> exec({{name}}){{^-last}},{{/-last}}         
{{/mustachePortlet}}
      )
  }
{{/regular}}  {{/mustacheRequests}}{{/mustacheScenario}}
  
/**
 * List of the differents scenarios
 */  
{{#mustacheScenario}}
  val {{scenarioName}} = scenario("{{scenarioName}}")
  
    .exec(http("Home")
	  .get("{{{siteURL}}}")
	  .check(regex("""<input name="_58_formDate" type="hidden" value="(.+?)" />""").saveAs("formDate")))
	.pause(1)
  	.feed(feeder)
    .exec(http("Login")
	  .post("""{{{loginPageURL}}}?p_p_id=58&p_p_lifecycle=1&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_count=1&_58_struts_action=%2Flogin%2Flogin""")
	  .formParam("""_58_formDate""", """${formDate}""")
	  .formParam("""_58_saveLastPath""", """false""")
	  .formParam("""_58_redirect""", """""")
	  .formParam("""_58_doActionAfterLogin""", """false""")
	  .formParam("""_58_login""", """${login}""")
	  .formParam("""_58_password""", """${password}""")
	  .formParam("""_58_rememberMe""", """false""")
	  .header("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"))

    .randomSwitch(
{{#mustacheRequests}}
      {{pourcentage}} -> exec({{^notRegular}}http("{{scenarioName}}{{requestName}}").get("{{{url}}}").check(regex("{{requestName}}")){{/notRegular}}{{^regular}}{{scenarioName}}{{requestName}}.Entrance{{/regular}}){{^last}},{{/last}}
{{/mustacheRequests}} 
  )
{{/mustacheScenario}}
  
    
  setUp(
{{#mustacheScenario}}
    {{scenarioName}}.inject( rampUsers({{users}}) over( {{duration}} seconds)){{^-last}},{{/-last}}
{{/mustacheScenario}}
  ).protocols(httpProtocol)
  
  
}
